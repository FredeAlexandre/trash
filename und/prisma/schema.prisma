// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Season {
    id               String   @id
    start            DateTime
    end              DateTime
    enrollment_start DateTime
    enrollment_end   DateTime
    matchs           Match[]
}

model Match {
    id              String            @id
    start           DateTime
    end             DateTime
    map             String
    type            String // enum { LEAGUE, SCRIM, TOURNAMENT }
    required_points Int
    season          Season            @relation(fields: [seasonId], references: [id])
    seasonId        String
    attendances     MatchAttendance[]

    @@index([seasonId])
}

model MatchAttendance {
    id      Int    @id @default(autoincrement())
    match   Match  @relation(fields: [matchId], references: [id])
    matchId String
    user    User   @relation(fields: [userId], references: [id])
    userId  String
    status  String // enum { PRESENT, ABSENT, MAYBE }

    @@unique([matchId, userId], name: "match_attendance_unique")
    @@index([matchId], name: "match_attendance_match_id")
    @@index([userId], name: "match_attendance_user_id")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String            @id @default(cuid())
    name          String?
    email         String?           @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    attendances   MatchAttendance[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
